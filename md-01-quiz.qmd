---
title: "Module 1 Quiz: Quarto Basics for openwashdata"
format: live-html
engine: knitr
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

## Introduction

This quiz tests your understanding of Quarto basics for openwashdata package documentation. The quiz covers YAML headers, code chunks, and data analysis integration.

## Section 1: Quarto Fundamentals

### Question 1: YAML Header

Which of the following is the correct YAML header for an openwashdata package README?

```{webr}
#| exercise: yaml_question
# Multiple choice question
# Select the correct YAML header format
```

::: {.callout-note}
## Hint
Think about what output format is typically used for GitHub README files.
:::

<details>
<summary>Solution</summary>
The correct YAML header for a README.qmd file is:
```yaml
---
output: github_document
---
```
</details>

### Question 2: pkgdown Configuration

What file is used to configure the pkgdown website for an openwashdata package?

```{webr}
#| exercise: pkgdown_config
# Write your answer as a string
answer <- "_____"
print(answer)
```

::: {.callout-note}
## Hint
The configuration file starts with an underscore and has a .yml extension.
:::

<details>
<summary>Solution</summary>
```r
answer <- "_pkgdown.yml"
```
</details>

## Section 2: Code Chunks and Options

### Question 3: Code Chunk Options

Create a code chunk that loads the tidyverse package but hides both the code and any messages:

```{webr}
#| exercise: chunk_options
# Load tidyverse with appropriate chunk options
# Use the code chunk option comments to specify hiding code and messages
```

::: {.callout-note}
## Hint
In Quarto, you can use `#| include: false` to hide both code and output, or `#| echo: false` and `#| message: false` separately.
:::

<details>
<summary>Solution</summary>
```r
#| echo: false
#| message: false
library(tidyverse)
```
</details>

### Question 4: Creating Tables

Use the gapminder dataset to create a summary table showing the average life expectancy by continent in 2007:

```{webr}
#| exercise: create_table
library(tidyverse)
library(gapminder)

# Create a summary table of average life expectancy by continent for 2007
# Your code here
```

::: {.callout-note}
## Hint
1. Filter the data for year 2007
2. Group by continent
3. Summarize to calculate mean life expectancy
4. You can use `knitr::kable()` to format the table nicely
:::

<details>
<summary>Solution</summary>
```r
gapminder %>%
  filter(year == 2007) %>%
  group_by(continent) %>%
  summarise(avg_life_exp = mean(lifeExp)) %>%
  knitr::kable(digits = 1)
```
</details>

## Section 3: Data Analysis Integration

### Question 5: Inline Code

Calculate the mean GDP per capita for Switzerland in 2007 and display it using inline code:

```{webr}
#| exercise: inline_code
library(gapminder)

# Calculate Switzerland's GDP per capita in 2007
swiss_gdp_2007 <- gapminder %>%
  filter(country == "Switzerland", year == 2007) %>%
  pull(gdpPercap)

# Display the result
paste("Switzerland's GDP per capita in 2007 was $", 
      format(swiss_gdp_2007, big.mark = ","), sep = "")
```

### Question 6: Data Visualization

Create a line plot showing the life expectancy over time for African countries with a population greater than 30 million in 2007:

```{webr}
#| exercise: visualization
library(tidyverse)
library(gapminder)

# First, identify African countries with population > 30 million in 2007
large_african_countries <- gapminder %>%
  filter(continent == "Africa", year == 2007, pop > 30000000) %>%
  pull(country)

# Create the plot
# Your code here
```

::: {.callout-note}
## Hint
1. Filter for the countries identified above
2. Use `ggplot()` with `geom_line()`
3. Map year to x-axis, lifeExp to y-axis, and country to color
4. Add appropriate labels
:::

<details>
<summary>Solution</summary>
```r
gapminder %>%
  filter(country %in% large_african_countries) %>%
  ggplot(aes(x = year, y = lifeExp, color = country)) +
  geom_line() +
  labs(title = "Life Expectancy Over Time",
       subtitle = "African countries with population > 30 million in 2007",
       x = "Year",
       y = "Life Expectancy (years)",
       color = "Country") +
  theme_minimal()
```
</details>

## Summary

This quiz covered essential Quarto skills for openwashdata package documentation:

1. **YAML Headers**: Configuring document output formats
2. **Code Chunks**: Managing code execution and output display
3. **Data Integration**: Combining narrative text with R analysis
4. **Visualization**: Creating informative plots within documents

Remember that Quarto documents can be rendered to multiple formats, making them ideal for creating both package documentation and interactive tutorials like this one!